// You are given two strings s and t.

// String t is generated by random shuffling string s and then add one more letter at a random position.

// Return the letter that was added to t.

 

// Example 1:

// Input: s = "abcd", t = "abcde"
// Output: "e"
// Explanation: 'e' is the letter that was added.
// Example 2:

// Input: s = "", t = "y"
// Output: "y"
 

// Constraints:

// 0 <= s.length <= 1000
// t.length == s.length + 1
// s and t consist of lowercase English letters.

// By sorting
class Solution {
    public char findTheDifference(String s, String t) {
        char[] chars_s = s.toCharArray();
        Arrays.sort(chars_s);
        
        char[] chars_t = t.toCharArray();
        Arrays.sort(chars_t);
        
        for (int i = 0; i < s.length(); i++) {
            if (chars_s[i] != chars_t[i]) {
                return chars_t[i];
            }
        }

        return chars_t[t.length() - 1];
    }
}

// Using HashMap
class Solution {
    public char findTheDifference(String s, String t) {
        Map<Character, Integer> chars = new HashMap<>();

        for(char c: s.toCharArray()) {
            if (chars.containsKey(c)) {
                chars.put(c, chars.get(c) + 1);
            } else {
                chars.put(c, 1);
            }
        }

        for (char c: t.toCharArray()) {
            if (chars.containsKey(c) && chars.get(c) != 0) {
                chars.put(c, chars.get(c) - 1);
            } else {
                return c;
            }
        }
        return t.charAt(1);
    }
}

// By using ASCII value
class Solution {
    public char findTheDifference(String s, String t) {
        int s_sum = 0;
        int t_sum = 0;
        for (int i = 0; i < t.length(); i++) {
            if (i < s.length()) s_sum += (int)s.charAt(i);
            t_sum += (int)t.charAt(i);
        }

        return (char)(t_sum - s_sum);
    }
}

// Using ex or 
class Solution {
    public char findTheDifference(String s, String t) {
        int sum = 0;
        
        for (int i = 0; i < t.length(); i++) {
            if (i < s.length()) sum ^= (int)s.charAt(i);
            sum ^= (int)t.charAt(i);
        }

        return (char)(sum);
    }
}